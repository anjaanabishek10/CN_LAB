RARP

AIM:
  To write and execute a program for simulating RARP protocol using TCP.

ALGORITHM:

  CLIENT:
    1. Start.
    2. Create socket.
    3. Establish connection.
    4. Get MAC address.
    5. Send MAC address to the server.
    6. Receive IP address from server.
    7. Display the IP address.
    8. Stop.

  SERVER:
    1. Start.
    2. Create socket.
    3. Bind socket with IP and port.
    4. Accept connection from client.
    5. Receive MAC address from the client.
    6. Check MAC table.
    7. Send IP address to the client.
    8. Close connection.
    9. Stop.

PROGRAM:

  CLIENT:
    import socket
    server_address = ("localhost", 1010)
    recv_port = 1020
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(server_address)
    print("\nConnected to {}\n".format(server_address))
    user_data = input("Enter MAC\n")
    client_socket.send(user_data.encode("utf-8"))
    data = client_socket.recv(recv_port).decode("utf-8")
    print(data)

  SERVER:
    import socket
    arp_table = {"aa:aa:aa:aa:aa:aa" : "1.1.1.1", "bb:bb:bb:bb:bb:bb" : "2.2.2.2", "cc:cc:cc:cc:cc:cc" : "3.3.3.3"}
    server_address = ("localhost", 1010)
    recv_port = 1020
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(server_address)
    server_socket.listen()
    print("\nWaiting for connection...")
    client_socket, client_address = server_socket.accept()
    print("\nGot request from {}\n".format(client_address))
    data = client_socket.recv(recv_port).decode("utf-8")
    return_data = arp_table.get(data, "Given MAC not found.")
    client_socket.send(return_data.encode("utf-8"))

OUTPUT:
  >>>python3 server.py
  >>>Waiting for connection...
  >>>Got request from 127.0.0.1
  
  >>>python3 client.py
  >>>Connected to 127.0.0.1
  >>>Enter MAC
  >>>aa:aa:aa:aa:aa:aa
  >>>1.1.1.1

RESULT:
  Thus the program to simulate RARP protocol was written and executed successfully and the output is verified.
  
NETWORK COMMANDS: tcpdump and ping

AIM:
  To study the working of networks commands such as tcpdump and ping.

COMMANDS:
  tcpdump
  ping

TCPDUMP:
  It is a command used to capture the packets that flows in your network. It is used in networking troubleshooting.

PING:
  It is used to check the availability of the host on network by sending ICMP echo request.

OUTPUT:
  >>>tcpdump
  19:48:19.406296 IP 192.168.191.42.domain > 192.168.191.25.38914: 10565 NXDomain 0/1/0 (122)
  19:48:19.407837 IP 192.168.191.25.59762 > 192.168.191.42.domain: 23926+ PTR? 42.191.168.192.in-addr.arpa. (45)
  19:48:19.893874 IP 192.168.191.42.domain > 192.168.191.25.59762: 23926 NXDomain 0/1/0 (122)
  
  >>>ping google.com
  PING google.com (142.250.67.46) 56(84) bytes of data.
  64 bytes from maa05s12-in-f14.1e100.net (142.250.67.46): icmp_seq=1 ttl=116 time=20.7 ms
  64 bytes from maa05s12-in-f14.1e100.net (142.250.67.46): icmp_seq=2 ttl=116 time=38.0 ms
  64 bytes from maa05s12-in-f14.1e100.net (142.250.67.46): icmp_seq=3 ttl=116 time=36.9 ms
  64 bytes from maa05s12-in-f14.1e100.net (142.250.67.46): icmp_seq=4 ttl=116 time=53.8 ms

RESULT:
  Thus the networks commands like tcpdump and ping were studied and executed successfully.
